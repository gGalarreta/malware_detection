from raw_analysis import raw_analysis
from dll_analysis import dll_analysis
from opcode_analysis import opcode_analysis
from shutil import copyfile
from neural_network import rnn
from svm import svm
from features_handler import features_handler
from statistics import plotter
import glob
import pefile
import pydasm
import os

class BinaryAnalysis():

  def __init__(self):
    self.malwares_directory = ""
    self.bening_directory = ""
    self.ouput_bening_directory = ""

    self.raw = False
    self.dll = False
    self.opcodes = False

    self.extension = ".txt"
    self.raw_name = "raw"
    self.dll_name = "dll"
    self.opcodes_name = "opcode"
    self.feature_name = "feature" + self.extension
    self.features_directory = os.getcwd() + "/features_handler/features"
    
    self.index_files_name = "index" + self.extension
    self.raw_final_dataset_directory = os.getcwd() + "/raw_final_dataset"
    self.train_data_set_directory = os.getcwd() + "/train_data_set"
    self.test_data_set_directory = os.getcwd() + "/test_data_set"
    self.rules_directory = os.getcwd() + "/features_handler/rules/rules" + self.extension
    self.vectorized_train_samples = "train_samples" + self.extension
    self.vectorized_test_samples = "test_samples" + self.extension
    self.svm_results_directory = os.getcwd() + "/svm/accuracy_results" + self.extension
    self.svm_results_predict_directory = os.getcwd() + "/svm/accuracy_predict_results" + self.extension


    self.limit_good_sample = 1
    self.train_percentaje = 0.9

    self.raw_analyzer = raw_analysis.Raw()
    self.dll_analyzer = dll_analysis.Dll()
    self.opcodes_analyzer = opcode_analysis.Opcode()
    self.plotter = plotter.Plotter()


  def set_malware_directory(self, malware_root):
    self.malwares_directory = malware_root

  def set_bening_directory(self, bening_root):
    self.bening_directory = bening_directory


#--------------DISASSEMBLE-----------

  def disassemble(self, *args):
    self.dissemble_settings()    
    if self.malwares_directory == "" :
      print "You must set the directory of malware samples"
    else :
      if args :
        print "This could be take some minutes"
        for arg in args:
          if self.raw_name == arg.lower() : self.raw = True
          if self.dll_name == arg.lower() : self.dll = True
          if self.opcodes_name == arg.lower() : self.opcodes = True
        self.disassemble_malwares()
        self.disassemble_benings()
      else :
        print "You must set the pe files structures as a arguments\nValid Values: raw,dll,opcodes"

  def disassemble_malwares(self):
    self.create_directory(self.raw_final_dataset_directory, True)
    
    index_classes = []
    for folder in os.listdir(self.malwares_directory):
      final_dataset_classes_directory = self.raw_final_dataset_directory + "/" + folder
      self.create_directory(final_dataset_classes_directory, False)
      raw_output_directoy, dll_output_directory, opcode_output_directory = self.set_directories(final_dataset_classes_directory)

      samples_directory = self.malwares_directory + "/" + folder
      files = os.listdir(samples_directory)
      number_of_samples = 0
      index_files = []

      for file in files:
        try:
          pe =  pefile.PE(samples_directory + "/" + file)
          if self.raw:
            raw_filename = raw_output_directoy + "/" + file + self.extension
            self.raw_analyzer.disassemble(pe, raw_filename)
          if self.dll:
            dll_filename = dll_output_directory + "/" + file + self.extension
            self.dll_analyzer.disassemble(pe, dll_filename)
          if self.opcodes:
            opcode_filename = opcode_output_directory + "/" + file + self.extension
            self.opcodes_analyzer.disassemble(pe, opcode_filename)

          number_of_samples +=1
          index_files = index_files + [file]
        except Exception as e:
          print e
      self.write_file(final_dataset_classes_directory + "/" + self.index_files_name, index_files)
      index_classes = index_classes + [folder]
      self.write_file(self.raw_final_dataset_directory + "/" + self.index_files_name, index_classes)

  def dissemble_settings(self):
    self.raw_analyzer.set_labels()

  def disassemble_benings(self):
    return True

  def get_train_test_data(self, train_percentaje):
    message = False
    self.create_directory(self.train_data_set_directory, message)
    self.create_directory(self.test_data_set_directory, message)
    self.train_percentaje = train_percentaje
    for folder in os.listdir(self.raw_final_dataset_directory):
      if folder != self.index_files_name:
        index_file = self.raw_final_dataset_directory + "/" + folder + "/" + self.index_files_name
        list_of_files = self.read_file(index_file)
        number_of_train_files = (train_percentaje * len(list_of_files))/100
        output_directory = ""
        self.create_directory(self.train_data_set_directory + "/" + folder + "/" + self.dll_name, message)
        self.create_directory(self.train_data_set_directory + "/" + folder + "/" + self.opcodes_name, message)
        self.create_directory(self.test_data_set_directory + "/" + folder + "/" + self.dll_name, message)
        self.create_directory(self.test_data_set_directory + "/" + folder + "/" + self.opcodes_name, message)
        index_train_files = []
        index_test_files = []
        for index, file in enumerate(list_of_files):
          if index < number_of_train_files:
            output_directory = self.train_data_set_directory + "/" + folder
            index_train_files = index_train_files + [file]
          else:
            output_directory = self.test_data_set_directory + "/" + folder
            index_test_files = index_test_files + [file]
          src = self.raw_final_dataset_directory + "/" + folder + "/" + self.dll_name + "/" + file + self.extension
          dst = output_directory + "/" + self.dll_name + "/" + file + self.extension
          copyfile(src, dst)
          src = self.raw_final_dataset_directory + "/" + folder + "/" + self.opcodes_name + "/" + file + self.extension
          dst = output_directory + "/" + self.opcodes_name + "/" + file + self.extension
          copyfile(src, dst)
        self.write_file(self.train_data_set_directory + "/" + folder + "/" + self.index_files_name, index_train_files)
        self.write_file(self.test_data_set_directory + "/" + folder + "/" + self.index_files_name, index_test_files)

#--------------MODELS-----------

  def rnn_model(self):
    model = rnn.RnnLstm()
    model.set_train_data_set_directory(self.train_data_set_directory)
    model.set_test_data_set_directory(self.test_data_set_directory)
    model.set_classes_directory(self.raw_final_dataset_directory + "/" + self.index_files_name)
    model.build()
    #model.train()

  def svm_model(self):
    model = svm.Svm()
    model.set_features_directory(self.features_directory)
    model.set_train_samples(self.vectorized_train_samples)
    model.set_test_samples(self.vectorized_test_samples)
    model.set_classes_directory(self.raw_final_dataset_directory + "/" + self.index_files_name)
    model.set_results_directory(self.svm_results_directory)
    model.set_predict_results_directory(self.svm_results_predict_directory)
    model.build()

  def features_hanlder_setup(self):
    handler = features_handler.FeaturesHandler()
    handler.set_index_files_name(self.index_files_name)
    handler.set_rules_directory(self.rules_directory)
    handler.set_features_directory(self.features_directory)
    handler.set_train_data_set_directory(self.train_data_set_directory)
    handler.set_test_data_set_directory(self.test_data_set_directory)
    handler.analysis_names(raw = self.raw_name, dll = self.dll_name, opcodes = self.opcodes_name)
    handler.active_analysis(raw = self.raw, dll = self.dll, opcodes = self.opcodes)
    handler.set_vectorized_train_samples(self.vectorized_train_samples)
    handler.set_vectorized_test_samples(self.vectorized_test_samples)
    handler.get_dendograms_through_rules()
    #handler.get_top_features_through_rules()
    #handler.construct_feature_vector()
    #handler.vectorize(option="train")
    #handler.vectorize(option="test")

#--------------Plots-----------

  def show_summary(self):
    self.plotter.set_data_directory(self.train_data_set_directory)
    self.plotter.set_dll(True)
    self.plotter.set_opcodes(True)
    self.plotter.set_extract_uniques_elements(True)
    self.plotter.summary()


#--------------UTILS-----------

  def set_directories(self, path):
    raw_directory = path + "/" + self.raw_name
    dll_directory = path + "/" + self.dll_name
    opcode_directory = path + "/" + self.opcodes_name
    message = False
    if self.raw:
      self.create_directory(raw_directory, message)
    if self.dll:
      self.create_directory(dll_directory, message)
    if self.opcodes:
      self.create_directory(opcode_directory, message)
    return raw_directory, dll_directory, opcode_directory

  def create_directory(self, directory, message):
    if message:
      print "Samples are stored in " + directory
    if not os.path.exists(directory):
      os.makedirs(directory)

  def read_file(self,file_name):
    lines = [line.rstrip('\n') for line in open(file_name)]
    return lines

  def write_file(self, output_file, data_list):
    file = open(output_file, "w")
    for item in data_list:
      file.write(item)
      file.write("\n")
    file.close()