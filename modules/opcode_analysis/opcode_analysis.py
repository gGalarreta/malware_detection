import sys
import pefile
import pydasm
import os
import numpy as np

class Opcode():

  def __init__(self):
    self.n_grams = 3

  def set_n_grams(self, value):
    self.n_grams = value

  def disassemble(self, pe_data, file_name):
    file = open(file_name, "w")
    try:
      ep = pe_data.OPTIONAL_HEADER.AddressOfEntryPoint
      ep_ava = ep+pe_data.OPTIONAL_HEADER.ImageBase
      data = pe_data.get_memory_mapped_image()[ep:ep+self.max_number]
      offset = 0
      while offset < len(data):
        i = pydasm.get_instruction(data[offset:], pydasm.MODE_32)
        instruction = pydasm.get_instruction_string(i, pydasm.FORMAT_INTEL, ep_ava+offset)
        if instruction == None :
          break
        offset += i.length
        file.write(instruction.split(' ', 1)[0])
        file.write('\n')
    except Exception as e:
      print e

  def extract_features(self, input_directory, output_directory):
    files = os.listdir(input_directory)
    opcodes_n_grams_list = []
    for file in files:
      file_name = input_directory + "/" + file
      opcodes_n_grams_list = opcodes_n_grams_list + self.read_file_to_n_gram(file_name)
    opcodes_n_grams_list = self.ngrams(opcodes_n_grams_list, self.n_grams)
    opcodes_n_grams_list = self.unique_list_of_lists(opcodes_n_grams_list)
    self.write_file(output_directory, opcodes_n_grams_list)

  def read_file_to_n_gram(self,file_name):
    lines = [line.rstrip('\n') for line in open(file_name)]
    return lines

  def write_file(self, file_name, data_list):
    output_file = open(file_name, "w")
    for item in data_list:
      for gram in item:
        output_file.write(gram)
        output_file.write(',')
      output_file.write("\n")

  def ngrams(self, text, size = 2, i = 0):
    while len(text[i:i+size]) == size:
      yield text[i:i+size]
      i += 1

  def unique_list_of_lists(self, data):
    unique_data = [list(x) for x in set(tuple(x) for x in data)]
    return unique_data