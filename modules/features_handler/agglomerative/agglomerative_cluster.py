import pandas as pd
from sklearn.cluster import AgglomerativeClustering
from scipy.cluster.hierarchy import dendrogram, linkage, fcluster
import matplotlib.pylab as plt
from sklearn.metrics import silhouette_score
import numpy as np

class Agglomerative():

  def __init__(self):
    self.max_d = 7.08
    self.cut_off = 150

  def set_max_d(self, value):
    self.max_d = value

  def set_cut_off(self, value):
    self.cut_off = value

  def get_dendograms(self, data, output_file):
    # generate the linkage matrix
    Z = linkage(data, 'centroid')

    # set cut-off to 150
    max_d = self.max_d                # max_d as in max_distance

    #plt.figure(figsize=(15, 10))
    #plt.title('Hierarchical Clustering Dendrogram')
    #plt.xlabel('Families')
    #plt.ylabel('distance')
    #dendrogram(
    #    Z,
    #    truncate_mode='lastp',  # show only the last p merged clusters
    #    p = self.cut_off,                  # Try changing values of p
    #    leaf_rotation = 90.,      # rotates the x axis labels
    #    leaf_font_size = 8.,      # font size for the x axis labels
    #)
    #print(output_file)
    output_file_scores = output_file.replace(".png", ".txt")
    file = open(output_file_scores, "w")
    temps = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
    for cut in temps:
        results = fcluster(Z, cut, 'distance')
        sil_metrics = silhouette_score(data, results, metric="euclidean")
        num_clusters = len(np.unique(results))
        file.write(str(cut))
        file.write("   ")
        file.write(str(num_clusters))
        file.write("   ")
        file.write(str(sil_metrics))
        file.write("\n")
    file.close()
    #plt.axhline(y = max_d, c = 'k')
    #plt.savefig(output_file)
