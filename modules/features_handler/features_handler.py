from dll_analysis import dll_analysis
from opcode_analysis import opcode_analysis

import os

class FeaturesHandler():

  def __init__(self):
    self.rules_directory = None
    self.train_data_set_directory = None
    self.test_data_set_directory = None
    
    self.dll_analyzer = dll_analysis.Dll()
    self.opcodes_analyzer = opcode_analysis.Opcode()
    
    self.extension = ".txt"
    self.raw_name = "raw"
    self.dll_name = "dll"
    self.opcodes_name = "opcode"
    self.index_files_name = None
    self.feature_name = "feature" + self.extension
    self.vectorized_train_samples = None
    self.vectorized_test_samples = None
    self.dll_vector_name = "/feature_vector_dll" + self.extension
    self.opcodes_vector_name = "/feature_vector_opcode" + self.extension
    self.features_directory = None
    
    self.raw = False
    self.dll = False
    self.opcodes = False


  def set_rules_directory(self, value):
    self.rules_directory = value

  def set_index_files_name(self, value):
    self.index_files_name = value

  def set_train_data_set_directory(self, value):
    self.train_data_set_directory = value

  def set_test_data_set_directory(self, value):
    self.test_data_set_directory = value

  def analysis_names(self, raw, dll, opcodes):
    self.raw_name = raw
    self.dll_name = dll
    self.opcodes_name = opcodes

  def set_features_name(self, value):
    self.feature_name = value

  def set_features_directory(self, value):
    self.features_directory = value

  def set_vectorized_train_samples(self, value):
    self.vectorized_train_samples = value

  def set_vectorized_test_samples(self, value):
    self.vectorized_test_samples = value

  def active_analysis(self, raw, dll, opcodes):
    self.raw = raw
    self.dll = dll
    self.opcodes = opcodes

#------------------------ EXTRACT------------------------------

  def get_top_features_through_rules(self):
    rules = self.get_rules()
    message = False
    self.create_directory(self.features_directory, message)
    for index, rule in enumerate(rules):
      self.create_directory(self.features_directory + "/rule_" + str(index), message)
      self.get_top_features(rule, index)

  def get_rules(self):
    lines = self.read_file(self.rules_directory)
    rules_labels = lines[0].split(",")
    rules = []
    lines.pop(0)
    for line in lines:
      rules_dicc = {}
      for index,value in enumerate(line.split(",")):
        label = rules_labels[index]
        rules_dicc[label] = value
      rules.append(rules_dicc)
    return rules 

  def get_top_features(self, rule_settings, rule_index):
    for folder in os.listdir(self.train_data_set_directory):
      path = self.features_directory + "/rule_" + str(rule_index) + "/" + folder
      raw_feature_directory, dll_feature_directory, opcode_feature_directory = self.set_directories(path)
      try:
        if self.dll:
          dll_input_directory = self.train_data_set_directory + "/" + folder + "/" + self.dll_name
          dll_output_directory = dll_feature_directory + "/" + self.feature_name
          self.dll_analyzer.extract_features(dll_input_directory, dll_output_directory, rule_settings)
        if self.opcodes:
          opcode_input_directory = self.train_data_set_directory + "/" + folder + "/" + self.opcodes_name
          opcode_output_directory = opcode_feature_directory + "/" + self.feature_name
          self.opcodes_analyzer.extract_features(opcode_input_directory, opcode_output_directory, rule_settings)
      except Exception as e:
        print e

#------------------------ INIT VECTOR------------------------------

  def construct_feature_vector(self):
    rules = self.get_rules()
    for index, rule in enumerate(rules):
      self.feature_vector(index) 

  def feature_vector(self, rule_index):
    raw_features, dll_features, opcodes_features = self.get_all_features(rule_index)
    raw_vector, dll_vector, opcodes_vector = self.features_bunch_to_unique_elements(raw_features, dll_features, opcodes_features)
    self.write_feature_vector(rule_index, raw_vector, dll_vector, opcodes_vector)

  def get_all_features(self, rule_index):
    raw_features = []
    dll_features = []
    opcodes_features = []
    directory = self.features_directory + "/rule_" + str(rule_index)
    for folder in os.listdir(directory):
      if self.raw:
        True
      if self.dll:
        dll_directory = directory + "/" + folder + "/" + self.dll_name + "/" + self.feature_name
        dll_features = dll_features  + self.read_file(dll_directory)
      if self.opcodes:
        opcodes_directory = directory + "/" + folder + "/" + self.opcodes_name + "/" + self.feature_name
        opcodes_features = opcodes_features + self.read_file(opcodes_directory)
    return raw_features, dll_features, opcodes_features
       
  def features_bunch_to_unique_elements(self, raw_data_list, dll_data_list, opcode_data_list):
    raw_features = []
    dll_features = []
    opcodes_features = []
    if self.raw:
      True
    if self.dll:
      dll_features =list(set(dll_data_list))
    if self.opcodes:
      opcodes_features = list(set(opcode_data_list))
    return raw_features,dll_features,opcodes_features       

  def write_feature_vector(self, rule_index, raw_vector, dll_vector, opcode_vector):
    if self.raw:
      True
    if self.dll:
      dll_vector_file = self.features_directory + "/rule_" + str(rule_index) + self.dll_vector_name
      self.write_file(dll_vector_file, dll_vector)
    if self.opcodes:
      opcode_vector_file = self.features_directory + "/rule_" + str(rule_index) + self.opcodes_vector_name
      self.write_file(opcode_vector_file, opcode_vector) 

#------------------------ INIT VECTOR------------------------------


  def vectorize(self, option):
    rules = self.get_rules()
    for index, rule in enumerate(rules):
      path = self.features_directory + "/rule_" + str(index)
      if option == "train":
        output_directory =  path + "/" + self.vectorized_train_samples
        self.vectorize_samples(path, output_directory, self.train_data_set_directory)
      else:
        output_directory = path + "/" + self.vectorized_test_samples
        self.vectorize_samples(path, output_directory, self.test_data_set_directory)

  def vectorize_samples(self, path, output_directory, input_directory):
    matrix_file = open(output_directory, "w")
    for folder in os.listdir(input_directory):
      name_base = input_directory + "/" + folder + "/"
      index_file = name_base + self.index_files_name
      files_in_folder = self.read_file(index_file)

      if self.dll:
        vector_directory = path + self.dll_vector_name
        dll_feature_vector = self.read_file(vector_directory)
      if self.opcodes:
        vector_directory = path + self.opcodes_vector_name
        opcode_feature_vector = self.read_file(vector_directory)

      for file in files_in_folder:
        raw_vector = []
        dll_binary_vector = []
        opcodes_binary_vector = []
        if self.raw:
          return True
        if self.dll:
          dll_attributes = self.read_file(name_base + self.dll_name + "/" + file + self.extension)
          dll_binary_vector = self.get_binary_vector(dll_attributes, dll_feature_vector)
        if self.opcodes:
          opcodes_attributes = self.read_file(name_base + self.opcodes_name + "/" + file + self.extension)
          opcodes_binary_vector = self.get_binary_vector(self.opcodes_analyzer.ngrams(opcodes_attributes), opcode_feature_vector)
        sample_vector = raw_vector + dll_binary_vector + opcodes_binary_vector
        if self.valid_sample_vector(sample_vector):
          sample_vector = self.add_identifier_to_samples(sample_vector, file, folder)
          for item in sample_vector:
            matrix_file.write(str(item))
            matrix_file.write(",")
          matrix_file.write("\n")
    matrix_file.close()    

  def get_binary_vector(self, attributes, vector):
    #1 the sample has the feature 
    #0 the sample has not the feature
    output_vector = []
    for feature in vector:
      output_vector = output_vector + [int(feature in attributes)]
    return output_vector

  def add_identifier_to_samples(self, vector, file_name, folder_name):
    #name,feature...feature,class
    return [file_name.lower()] + vector + [folder_name.lower()]

  def valid_sample_vector(self, vector):
    return True
    #percentage_of_zeros = round(vector.count(0) / float(len(vector)), 2)
    #return percentage_of_zeros < self.limit_good_sample    

#------------------------ UTILS------------------------------


  def read_file(self,file_name):
    lines = [line.rstrip('\n') for line in open(file_name)]
    return lines

  def write_file(self, output_file, data_list):
    file = open(output_file, "w")
    for item in data_list:
      file.write(item)
      file.write("\n")
    file.close()

  def set_directories(self, path):
    raw_directory = path + "/" + self.raw_name
    dll_directory = path + "/" + self.dll_name
    opcode_directory = path + "/" + self.opcodes_name
    message = False
    if self.raw:
      self.create_directory(raw_directory, message)
    if self.dll:
      self.create_directory(dll_directory, message)
    if self.opcodes:
      self.create_directory(opcode_directory, message)
    return raw_directory, dll_directory, opcode_directory    

  def create_directory(self, directory, message):
    if message:
      print "Samples are stored in " + directory
    if not os.path.exists(directory):
      os.makedirs(directory)    