from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
from sklearn.datasets import make_friedman1
from sklearn.feature_selection import RFE
from sklearn.svm import SVR
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.datasets import load_iris
from sklearn.feature_selection import SelectFromModel
from sklearn.svm import LinearSVC
from sklearn.feature_selection import VarianceThreshold


def tree_based():
  iris = load_iris()
  print iris
  X, y = iris.data, iris.target
  # print X
  # print y
  # print X.shape
  clf = ExtraTreesClassifier()
  clf = clf.fit(X, y)
  # print clf.feature_importances_  
  model = SelectFromModel(clf, prefit=True)
  X_new = model.transform(X)
  # print X_new.shape               
  print X_new

def l1_based():
  iris = load_iris()
  X, y = iris.data, iris.target
  lsvc = LinearSVC(C=0.01, penalty="l1", dual=False).fit(X, y)
  model = SelectFromModel(lsvc, prefit=True)
  X_new = model.transform(X)
  print X_new

def rfe_based():
  # X, y = make_friedman1(n_samples=150, n_features=4, random_state=0)
  estimator = SVR(kernel="linear")
  iris = load_iris()
  X, y = iris.data, iris.target
  selector = RFE(estimator, 2, step=1)
  selector = selector.fit(X, y)
  print selector.support_ 
  print selector.ranking_

def invariant():
  # X = [[0, 0, 1], [0, 1, 0], [1, 0, 0], [0, 1, 1], [0, 1, 0], [0, 1, 1]]
  iris = load_iris()
  X, y = iris.data, iris.target
  sel = VarianceThreshold(threshold=(.8))
  #sel = VarianceThreshold()
  print sel.fit_transform(X)


def chi():
  iris = load_iris()
  X, y = iris.data, iris.target
  X_new = SelectKBest(chi2, k=2).fit_transform(X,y = None)
  print X_new

def main():
  print "----------- tree based -----------"
  # tree_based()
  print "----------- l1 based -----------"
  # l1_based()
  print "----------- rfe based -----------"
  #rfe_based()
  print "----------- invariant based -----------"
  #invariant()
  print "----------- invariant based -----------"
  chi()

if __name__ == '__main__':
  main()