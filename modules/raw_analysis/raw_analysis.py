import os

class Raw():

  def __init__(self):
    self.file_header_labels = []
    self.optional_header_labels = []
    self.pe_sections_labels = []

    self.current_root = os.getcwd() + "/raw_analysis"

    self.header_label_name =  self.current_root +  "/file_header_labels.txt"
    self.optional_label_name = self.current_root + "/optional_header_labels.txt"
    self.pe_sections_label_name = self.current_root + "/pe_sections_labels.txt"

  def set_labels(self):
    self.file_header_labels = self.read_file_labels(self.header_label_name)
    self.optional_header_labels = self.read_file_labels(self.optional_label_name)
    self.pe_sections_labels = self.read_file_labels(self.pe_sections_label_name)

  def disassemble(self, pe_data, file_name):
    file = open(file_name, "w")
    self.disassemble_file_header(pe_data, file)
    self.disassemble_optional_header(pe_data, file)
    self.disassemble_pe_sections(pe_data, file)

  def disassemble_file_header(self, pe_data, file):
    for feature in self.file_header_labels :
      try:
        file.write(feature + "," + str(getattr(pe_data.FILE_HEADER, feature)))
        file.write("\n")
      except Exception as e:
        print e

  def disassemble_optional_header(self, pe_data, file):
    for feature in self.optional_header_labels:
      try:
        file.write(feature + "," + str(getattr(pe_data.OPTIONAL_HEADER, feature)))
        file.write("\n")
      except Exception as e:
        print e

  def disassemble_pe_sections(self, pe_data, file):
    for section in pe_data.sections:
      for feature in self.pe_sections_labels:
        try:
          file.write(section.Name + "_" + feature + "," + str(getattr(section, feature)))
          file.write("\n")
        except Exception as e:
          print e

  def size_of_raw_data(self, pe_data):
    size = 0
    for section in pe_data.sections:
      size += int(section.SizeOfRawData)
    return size

  def read_file_labels(self, file_name):
    lines = [line.rstrip('\n') for line in open(file_name)]
    return lines


