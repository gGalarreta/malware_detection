from sklearn import svm
from sklearn.model_selection import cross_val_score
from sklearn import metrics
import numpy as np
import os

class Svm():

  def __init__(self):
    self.classes_number = None
    self.classes = []
    self.features_directory = None
    self.train_samples = None
    self.test_samples = None
    self.classes_directory = None
    self.results_file = None
    self.cross_validation = 3


  def set_features_directory(self, value):
    self.features_directory = value

  def set_train_samples(self, value):
    self.train_samples = value

  def set_test_samples(self, value):
    self.test_samples = value

  def set_classes_directory(self, value):
    self.classes_directory = value

  def set_results_directory(self, value):
    self.results_file = value

  def build(self):
    self.set_settings(self.classes_directory)
    output_acc_file = open(self.results_file, 'w')
    for folder in os.listdir(self.features_directory):
      train_directory = self.features_directory + "/" + folder + "/" + self.train_samples
      test_directory = self.features_directory + "/" + folder + "/" + self.test_samples
      x_train, y_train = self.load(train_directory)
      x_test, y_test = self.load(test_directory)
      model = svm.SVC(kernel='linear', C=1)
      scores = cross_val_score(model, x_train, y_train, cv = self.cross_validation)
      output_acc_file.write("%s%s%s%s\n" % ("folder: ", folder, " accuracy: ", scores.mean()))
    output_acc_file.close()

  def load(self, data_directory):
    file = open(data_directory, 'r')
    features_list = []
    classes_list = []
    features_number = 0
    samples_number = 0
    for line in file:
      sample_class, features = self.get_values(line.split(","))
      features_list =  features + features_list
      classes_list = [sample_class] + classes_list
      samples_number += 1
      features_number = len(features)
    return np.asarray(features_list).reshape(samples_number, features_number), np.asarray(classes_list).reshape(samples_number, 1)

  def set_settings(self, classes_directory):
    self.classes = self.read_file(classes_directory)
    self.classes_number = len(self.classes)

  def get_values(self, data):
    #remove class value and \n
    data.pop()
    class_name =  data.pop()
    #remove sample_name
    data.pop(0)
    return self.class_value(class_name), data

  def class_value(self, name):
    return self.classes.index(name)

  def read_file(self, file_name):
    lines = [line.rstrip('\n') for line in open(file_name)]
    lines = [word.lower() for word in lines]
    return lines

