import os
from scipy.sparse import *
import numpy as np

class Plotter():

  def __init__(self):
    self.extract_uniques_elements = True
    self.data_directory = None
    self.dll = True
    self.opcodes = True
    self.plotter_directory = os.getcwd() + "/" + "statistics"
    self.summarize_directory = self.plotter_directory + "/summary"

  def set_data_directory(self, value):
    self.data_directory = value

  def set_extract_uniques_elements(self, value):
    self.extract_uniques_elements = value

  def set_dll(self, value):
    self.dll = value

  def set_opcodes(self, value):
    self.opcodes = value

  def set_summarize_directory(self, value):
    self.summarize_directory = value

  def summary(self):
    self.handling_data()
    self.summarize_data()

  def handling_data(self):
    if self.extract_uniques_elements:
      for folder in os.listdir(self.data_directory):
        dll_list = []
        opcodes_list = []
        current_data_directory = self.summarize_directory + "/" + folder
        self.create_directory(current_data_directory)
        index = self.read_file(self.data_directory + "/" + folder + "/index.txt")
        for file in index:
          if self.dll :
            dll_list = self.handling_unique_elements(dll_list, self.data_directory + "/" + folder + "/dll/" + file + ".txt")
          if self.opcodes :
            opcodes_list = self.handling_unique_elements(opcodes_list, self.data_directory + "/" + folder + "/opcode/" + file + ".txt")
        self.create_directory(current_data_directory + "/dll")
        self.create_directory(current_data_directory + "/opcode")
        if self.dll:
          self.write_file(current_data_directory + "/dll/feature.txt", dll_list)
        if self.opcodes:
          self.write_file(current_data_directory + "/opcode/feature.txt", opcodes_list)

  def handling_unique_elements(self, current_list, path):
    data_list = self.read_file(path)
    data_list = list(set(data_list))
    data_list = list(set(current_list + data_list))
    return data_list

  def summarize_data(self):
    dll_file = open(self.summarize_directory + "/dll_summary.txt", "w")
    opcode_file = open(self.summarize_directory + "/opcode_summary.txt", "w")
    for folder in os.listdir(self.summarize_directory):
      if not folder.endswith('.txt'):
        dll_unique_list = []
        opcode_unique_list = []
        if self.dll:
          dll_unique_list = self.read_file(self.summarize_directory + "/" + folder + "/dll/feature.txt")
          self.assess_and_plot_data(folder, dll_unique_list, dll_file, term = "dll")
        if self.opcodes :
          opcode_unique_list = self.read_file(self.summarize_directory + "/" + folder + "/opcode/feature.txt")
          self.assess_and_plot_data(folder, opcode_unique_list, opcode_file, term = "opcode")
    dll_file.close()
    opcode_file.close()

  def assess_and_plot_data(self, folder, unique_list, output_file, term):
    path = self.data_directory + "/" + folder
    index = self.read_file( path + "/index.txt")
    assess_data = {el:0 for el in unique_list}
    for file in index:
      data_path = path + "/" + term + "/" + file + ".txt"
      data = self.read_file(data_path)
      for val in data:
        assess_data[val] +=1
    output_file.write(folder)
    output_file.write("\n")
    self.write_dict(assess_data, output_file)

  def write_list(self, list_to_write, file):
    for item in list_to_write:
      file.write(str(item))
      file.write(",")
    file.write("\n")

  def write_dict(self, data, file):
    for k,v in data.items():
      file.write(k)
      file.write(",")
      file.write(str(v))
      file.write("\n")

  def read_file(self,file_name):
    lines = [line.rstrip('\n') for line in open(file_name)]
    return lines

  def create_directory(self, directory):
    if not os.path.exists(directory):
      os.makedirs(directory)

  def write_file(self, output_file, data_list):
    file = open(output_file, "w")
    for item in data_list:
      file.write(item)
      file.write("\n")
    file.close()