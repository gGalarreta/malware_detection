#!/usr/bin/python python2
from binary_analysis import binary_analysis

import numpy as np, pandas as pd
#import pandas as pd
#from sklearn.cluster import AgglomerativeClustering
#from sklearn.metrics import silhouette_score
#from sklearn.metrics import adjusted_rand_score
#from sklearn.cluster import KMeans
#from sklearn import datasets
#from scipy.cluster.hierarchy import dendrogram, linkage
#import matplotlib.pylab as plt

if __name__ == '__main__':


  #n = 10
  #X = np.arange(20)
  #print(X)

  #resample_i = np.floor(np.random.rand(n)*len(X)).astype(int)
  #X_resample1 = X[resample_i]
  #resample_i = np.floor(np.random.rand(n)*len(X)).astype(int)
  #X_resample2 = X[resample_i]
  #resample_i = np.floor(np.random.rand(n)*len(X)).astype(int)
  #X_resample3 = X[resample_i]
  #resample_i = np.floor(np.random.rand(n)*len(X)).astype(int)
  #X_resample4 = X[resample_i]

  #print(X_resample1)
  #print(X_resample1.mean())
  #print(X_resample2)
  #print(X_resample2.mean())
  #print(X_resample3)
  #print(X_resample3.mean())
  #print(X_resample4)
  #print(X_resample4.mean())

  
  b = binary_analysis.BinaryAnalysis()
    #b.set_malware_directory("/home/gustavo/Projects/malware_data/Batches/1k")
    #b.set_malware_directory("/home/gustavo/Projects/malware_data/data_set")
    #b.disassemble("dll", "opcode")
    #b.get_train_test_data(90)
    #b.show_summary()
  b.dll = True
  b.opcodes = False
  b.features_hanlder_setup(only_dendrogram=True)
  #print("SVM")
  #b.svm_model()
  #b.rnn_model()
  




  #print(iris.head(2))
  #print(iris.tail(2))
  #for n_clusters in range(2,8):
  #  cluster_model = AgglomerativeClustering(n_clusters=n_clusters, affinity='euclidean',linkage='ward')
  #  cluster_labels = cluster_model.fit_predict(iris_matrix)
  #  silhouette_avg = silhouette_score(iris_matrix,cluster_labels,metric='euclidean')
  #  adj_rand_score = adjusted_rand_score(iris['Species'],cluster_labels)
  #  print("AgglomerativeClustering")
  #  print("For n_clusters =", n_clusters, "The average silhouette_score is:", silhouette_avg)
  #  print ("For n_clusters =", n_clusters, "The adjusted rand_score is:", adj_rand_score)
  #  print("KMeans")
  #  cluster_model = KMeans(n_clusters=n_clusters, random_state=10)
  #  cluster_labels = cluster_model.fit_predict(iris_matrix)
  #  silhouette_avg = silhouette_score(iris_matrix,cluster_labels,metric='euclidean')
  #  adj_rand_score = adjusted_rand_score(iris['Species'],cluster_labels)
  #  print("For n_clusters =", n_clusters, "The average silhouette_score is:", silhouette_avg)
  #  print ("For n_clusters =", n_clusters , "The adjusted rand_score is:", adj_rand_score)

  # calculate full dendrogram

  # generate the linkage matrix
  #Z = linkage(iris_SP, 'ward')

  # set cut-off to 150
  #max_d = 7.08                # max_d as in max_distance

  #plt.figure(figsize=(25, 10))
  #plt.title('Iris Hierarchical Clustering Dendrogram')
  #plt.xlabel('Species')
  #plt.ylabel('distance')
  #dendrogram(
  #    Z,
  #    truncate_mode='lastp',  # show only the last p merged clusters
  #    p=150,                  # Try changing values of p
  #    leaf_rotation=90.,      # rotates the x axis labels
  #    leaf_font_size=8.,      # font size for the x axis labels
  #)
  #plt.axhline(y=max_d, c='k')
  #plt.savefig("test1.png")
