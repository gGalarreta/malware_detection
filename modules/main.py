#!/usr/bin/python python2
from binary_analysis import binary_analysis

import numpy as np
#import pandas as pd
#from sklearn.cluster import AgglomerativeClustering
#from sklearn.metrics import silhouette_score
#from sklearn.metrics import adjusted_rand_score
#from sklearn.cluster import KMeans
#from sklearn import datasets
#from scipy.cluster.hierarchy import dendrogram, linkage
#import matplotlib.pylab as plt

if __name__ == '__main__':


  #n = 10
  #X = np.arange(20)
  #print(X)

  #resample_i = np.floor(np.random.rand(n)*len(X)).astype(int)
  #X_resample1 = X[resample_i]
  #resample_i = np.floor(np.random.rand(n)*len(X)).astype(int)
  #X_resample2 = X[resample_i]
  #resample_i = np.floor(np.random.rand(n)*len(X)).astype(int)
  #X_resample3 = X[resample_i]
  #resample_i = np.floor(np.random.rand(n)*len(X)).astype(int)
  #X_resample4 = X[resample_i]

  #print(X_resample1)
  #print(X_resample1.mean())
  #print(X_resample2)
  #print(X_resample2.mean())
  #print(X_resample3)
  #print(X_resample3.mean())
  #print(X_resample4)
  #print(X_resample4.mean())

  
  b = binary_analysis.BinaryAnalysis()
    #b.set_malware_directory("/home/gustavo/Projects/malware_data/Batches/1k")
    #b.set_malware_directory("/home/gustavo/Projects/malware_data/data_set")
    #b.disassemble("dll", "opcode")
    #b.get_train_test_data(90)
    #b.show_summary()
  #b.boostrap_data()
  b.dll = True
  b.opcodes = True
  #b.features_hanlder_setup(only_dendrogram=False)
  #print("SVM")
  b.svm_model()
  #b.rnn_model()
  
