#!/usr/bin/env  python

from binary_analysis import binary_analysis
from raw_analysis import raw_analysis
from dll_analysis import dll_analysis
from opcode_analysis import opcode_analysis
from k_means import k_means
from neural_network import neural_network
from sklearn.feature_extraction.text import TfidfVectorizer
import pefile
import pydasm
import sys

if __name__ == '__main__':

  #b = binary_analysis.BinaryAnalysis()
  #b.set_malware_directory("//home/gustavo/Projects/malware_data/data_set")
  #b.disassemble("dll", "opcode")
  #b.opcodes = True
  #b.dll = True
  #b.extract_features()
  #b.feature_vector()
  #b.vectorize_samples()



  # -------------------- Funcionality Test ---------------

  cnn = neural_network.ConvNet()
  #x,y = cnn.set_data("/home/gustavo/Projects/malware-detection/modules/features/matrix_features.txt", "/home/gustavo/Projects/malware-detection/modules/raw_final_dataset/index.txt")

  cnn.set_input_size(1,len(x))
  cnn.set_batch_size(40)
  cnn.set_epochs(4)
  cnn.network_model()
  cnn.train("/home/gustavo/Projects/malware-detection/modules/features/matrix_features.txt", "/home/gustavo/Projects/malware-detection/modules/raw_final_dataset/index.txt")
  print x
  print "------------------"
  print y
  #cnn.set_settings("/home/gustavo/Projects/malware-detection/modules/raw_final_dataset/index.txt")
  #print cnn.classes
  
  #o = opcode_analysis.Opcode()
  #v = b.read_file(b.opcode_feature_vector_name)
  #v_attr = b.read_file("/home/gustavo/Projects/malware-detection/modules/raw_final_dataset/Adware/opcode/VirusShare_1ebf190cb60689b186fb0eb9585374b9.txt")
  #print o.ngrams(v_attr)
  #b_v = b.get_binary_vector(o.ngrams(v_attr), v)
  #print b_v

  #r = raw_analysis.Raw()
  #r.set_labels()
  #print r.file_header_labels

  #k = k_means.Kmeans()
  #k.set_number_top_words(20)
  #k.set_cluster_range(2,5)
  #o = opcode_analysis.Opcode()
  #o.extract_features(k, "/home/gustavo/Projects/malware-detection/modules/raw_final_dataset/class3/opcode", "/home/gustavo/Projects/malware-detection/modules/test_opcode.txt")

  #d = dll_analysis.Dll()
  #d.extract_features(k, "/home/gustavo/Projects/malware-detection/modules/raw_final_dataset/class1/dll", "/home/gustavo/Projects/malware-detection/modules/test_dll.txt")
  #b = binary_analysis.BinaryAnalysis()
  #b.dll = True
  #b.opcodes = True
  #b.vectorize()