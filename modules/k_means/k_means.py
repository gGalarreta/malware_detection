from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_samples, silhouette_score
import numpy as np

class Kmeans():

  def __init__(self):
    self.tfidf_vectorizer = None
    self.number_top_words = 20
    self.number_of_clusters = 2
    self.cluster_range = range(2,3)
    self.top_elements = []
    self.tfidf_matrix = None
    self.terms = None

  def set_number_top_words(self, value):
    self.number_top_words = value

  def set_vectorizer(self, vectorizer):
    self.tfidf_vectorizer = vectorizer

  def set_number_of_clusters(self, value):
    self.number_of_clusters = value

  def set_data(self, documents):
    self.tfidf_matrix = self.tfidf_vectorizer.fit_transform(documents)
    self.terms = self.tfidf_vectorizer.get_feature_names()

  def extract_top_features(self, output_file):
    self.find_top_elements_per_cluster()
    self.write_file(output_file, self.top_elements)

  def find_top_elements_per_cluster(self):
    try:
      km = KMeans(n_clusters = self.number_of_clusters)
      km.fit(self.tfidf_matrix)
      clusters = km.labels_
      order_centroids = km.cluster_centers_.argsort()[:,::-1]
      cluster_top_words = []
      for i in range(self.number_of_clusters):
        top_words = [str(self.terms[term_index]) for term_index in order_centroids[i, :self.number_top_words]]
        cluster_top_words = cluster_top_words + top_words
      self.top_elements = cluster_top_words
    except Exception as e:
      print e

  def write_file(self, output_file, data_list):
    file = open(output_file, "w")
    for item in data_list:
      file.write(item)
      file.write("\n")
    file.close()






