bening_samples_directory = "/home/gustavo/Projects/malware-detection/bening_samples"
malware_samples_directory = ""

import pefile
import os
import sys
import numpy as np

# recorrer todos los malwares/benignos
# obtengo los valores de sus atributos para cada muestra
# guarda en una matriz los resultados
# controlo el acumulador
# calculo medias totales y errores estandar
# recorro la matriz y construyo los vectores 

def features_vector():
  #malwares_matrix = matrix_raw_samples (malware_samples_directory)
  bening_matrix = matrix_raw_samples (bening_samples_directory)
  #malware_stadistics = stadistics_raw_samples (malwares_matrix)
  #bening_stadistics = stadistics_raw_samples (bening_matrix)
  #return feature_vector(malwares_matrix, malware_stadistics, bening_matrix, bening_stadistics)


def matrix_raw_samples(directory):
  array_results = np.array([])
  samples_quantity = 0
  for filename in os.listdir(directory):
    pe =  pefile.PE( directory + "/" + filename )
    headers_vector = sample_data_vector(pe)
    array_results =  np.append(array_results, headers_vector)
    samples_quantity+=1
  return array_results.reshape(samples_quantity, len(array_results)/samples_quantity)

def sample_data_vector(pe_data):
  file_header = file_header_array (pe_data)
  optional_header = optional_header_array (pe_data)
  pe_sections = pe_sections_array (pe_data)
  return np.concatenate( (file_header, optional_header, pe_sections), axis = 0)

def file_header_array(pe_data):
  result_array = np.array([])
  for feature in file_header_features():
    result_array =  np.append(result_array, getattr(pe_data.FILE_HEADER, feature) )
  return result_array

def optional_header_array(pe_data):
  result_array = np.array([])
  for feature in optional_header_features():
    result_array =  np.append(result_array, getattr(pe_data.OPTIONAL_HEADER, feature) )
  return result_array

def pe_sections_array(pe_data):
  result_array = np.array([])
  for section in pe_data.sections:
    for feature in pe_sections_features():
      result_array = np.append(result_array, getattr(section, feature))
  return result_array

def file_header_features():
  return read_file_labels("/home/gustavo/Projects/malware-detection/raw/file_header_labels.txt")

def optional_header_features():
  return read_file_labels("/home/gustavo/Projects/malware-detection/raw/optional_header_labels.txt")

def pe_sections_features():
  return read_file_labels("/home/gustavo/Projects/malware-detection/raw/pe_sections_labels.txt")

def valid_pe_sections():
  return ['.text', '.rdata', '.data', '.ndata', '.rsrc']

def read_file_labels(f_name):
  lines = [line.rstrip('\n') for line in open(f_name)]
  return lines

def stadistics_raw_samples(value):
  return True

def feature_vector(value1, value2, value3, value4):
  return True


