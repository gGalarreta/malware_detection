bening_samples_directory = "/home/gustavo/Projects/malware-detection/bening_samples"
malware_samples_directory = ""

import pefile
import os
import sys
import numpy as np

# recorrer todos los malwares/benignos
# obtengo los valores de sus atributos para cada muestra
# guarda en una matriz los resultados
# controlo el acumulador
# calculo medias totales y errores estandar
# recorro la matriz y construyo los vectores 

def features_vector():
  malwares_matrix = matrix_raw_samples (malware_samples_directory)
  bening_matrix = matrix_raw_samples (bening_samples_directory)
  malware_stadistics = stadistics_raw_samples (malwares_matrix)
  bening_stadistics = stadistics_raw_samples (bening_matrix)
  return feature_vector(malwares_matrix, malware_stadistics, bening_matrix, bening_stadistics)


def matrix_raw_samples(directory):
  array_results = np.array([])
  samples_quantity = 0
  for filename in os.listdir(directory):
    pe =  pefile.PE( directory + "/" + filename )
    np.concatenate(array_results, sample_data_vector(pe))
    samples_quantity+=1
  return array_results.reshape(samples_quantity, total_number_features)

def sample_data_vector():
  file_header = file_header_array (pe)
  optional_header = optional_header_array (pe)
  pe_sections = pe_sections_array (pe)  
  return np.concatenate( (file_header, optional_header, pe_sections), axis = 0)

def total_number_features():
  len(file_header_features) + len(optional_header_features) + len(pe_sections_features)

def file_header_features():
  ['NumberOfSections', 'NumberOfSymbols', 'SizeOfOptionalHeader', 'Characteristics']

def optional_header_features():
  ['']

def pe_sections_features():
  ['']

def stadistics_raw_samples(value):
  return True

def feature_vector(value1, value2, value3, value4):
  return True







